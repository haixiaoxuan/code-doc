启动服务
	redis-server ./redis.conf
	redis.conf 中 requirepass 设置redis密码
	注:配置密码后,客户端连上服务器,需要先执行授权命令
	auth 密码


工具：
	redis-benchmark  性能测试工具
	redis-check-aof  日志文件检测工(比如断电造成日志损坏,可以检测并修复)
	redis-check-dump  快照文件检测工具,效果类上
	redis-cli  客户端
	redis-server 服务端


数据类型
	string,link,set,order set, hash


scan操作：
	scan是增量循环，与keys不同，keys会造成假死状态，因为redis是单线程
	SCAN命令返回的是一个游标，从0开始遍历，到0结束遍历
	scan 0 match xiaoxuan* count 5  从0开始遍历，返回了游标6，又返回了数据，继续scan遍历，就要从6开始
	scan 6 match xiaoxuan* count 5


对key 的操作：
	dbsize 		查看数据库中key的个数
	select 2		选择2号库
	keys *
	del key1 key2 ... Keyn		返回值: 不存在的key忽略掉,返回真正删除的key的数量
	rename key newkey			注:如果newkey已存在,则newkey的原值被覆盖
	renamenx key newkey			返回: 发生修改返回1,未发生修改返回0，注: nx--> not exists, 即, newkey不存在时,作改名动作
	move key db			将key移到另一个db
	flushdb				清空当前库
	Flushall				
	keys						支持模糊查询，有3个通配符 *, ? ,[]。分别表示任意多个字符，单个字符，通配括号内的某一个字符
	set key_name value
	get key_name
	randomkey					返回随机key
	exists key_name 			返回: 0/1
	type key_name 				返回key的类型
	ttl key_name 				查询key的生命周期，返回秒数。不存在返回-2，永久返回-1 | pttl(ms 毫秒)
	expire key_name 整型值			设置key的生命周期（s） | pexpire key (ms毫秒)
	persist key_name 			将某一key设为永久有效
	
	
字符串操作：
	set key value [ex 秒数] / [px 毫秒数]  [nx] /[xx]
				如: set a 1 ex 10 , 10秒有效 | Set a 1 px 9000  , 9秒有效
					nx: 表示key不存在时,执行操作 | xx: 表示key存在时,执行操作
	setnx key value				如果key不存在则进行set操作，如果存在则返回0
	mset k1 v1 k2 v2
	get key
	mget k1 k2 k3
	setrange key offset value	将字符串offset位置替换为value， 如果偏移量>字符长度, 该字符自动补0x00
	append key value
	getrange key start stop  	拿出[start, stop]区间内的值，左数从零开始，右数从-1 开始 ， getrange key_name -2 -1
	getset key newvalue			获取旧值返回，并设置新值
	incr key					将指定key的value+1之后返回
	incrby key number
	incrbyfloat key floatnumber
	decr key					设置value-1之后返回
	decrby key number
	
	getbit key offset			获取value二进制位上的值0 or 1
	setbit  key offset value	返回: 该位上的旧值，如果offset过大会在中间填充0，offset最大为2**32-1， 即最大支持512M字符串
								如果想得到全为0的bit，setbit key_name 10000 0	key必须不存在
	bitop operation destkey key1 [key2 ...]
								对key1,key2..keyN作operation,并将结果保存到 destkey 上。operation 可以是 AND 、 OR 、 NOT 、 XOR
								经典用法：
								可以使用 与and 操作求出为1的个数
	

链表结构：
	lpush key value				作用: 把值插入到链接头部 | rpush | lpop
	rpop key 					作用: 返回并删除链表尾元素
	lrange key start stop		返回[start,stop]所有元素，左数从零开始，右数从-1
	lrem key count value		作用: 从key链表中删除 value值
								注: 删除count的绝对值个value后结束
								Count>0 从表头删除
								Count<0 从表尾删除
	ltrim key start stop		剪切[start, stop],并将剪切的值赋予 key
	lindex key index			返回index所指的值
	llen key					返回链表的元素个数
	linsert key after|before search value		在key链表中寻找search，并插入value，只会插入一个。
	rpoplpush source dest		把source的尾部拿出,放在dest的头部
	brpop|blpop key timeout		等待弹出key的尾/头元素， timeout为0则一直等待


set结构：
	sadd key value1 value2
	srem value1 value2			返回值: 忽略不存在的元素后,真正删除掉的元素的个数
	spop key					删除集合中的一个随机元素并返回此元素
	srandmember key				返回集合中随机元素
	sismember key  value		判断value是否存在于集合中
	smembers key				返回集合中的所有元素
	scard key					返回集合中元素个数
	smove source dest value		把source中的value删除并添加到dest中
	sinter  key1 key2 key3		作用: 求出key1 key2 key3 三个集合中的交集,并返回
	sinterstore dest key1 key2 key3		作用: 求出key1 key2 key3 三个集合中的交集,并赋给dest
	suion key1 key2.. Keyn		作用: 求出key1 key2 keyn的并集,并返回
	sdiff key1 key2 key3		作用: 求出key1与key2 key3的差集，即key1-key2-key3 
	

order set结构：
	zadd key score1 value1 score2 value2 ..
	zrem key value1 value2 ..	
	zremrangebyscore key min max	删除 score在 [min,max] 之间的元素
	zremrangebyrank key start end	删除按照排名
	zrank key member			查询member的排名(升序，0名开始)
	zrevrank key memeber		降序
	ZRANGE key start stop [WITHSCORES]	把集合排序后,返回名次[start,stop]的元素，默认是升序，Withscores 是把score也打印出来
	zrevrange key start stop
	zrangebyscore  key min max [withscores] limit offset N
								作用: 集合(升续)排序后,取score在[min,max]内的元素,并跳过 offset个, 取出N个
	zcard key					返回元素个数
	zcount key min max			返回min，max区间内元素个数
	zinterstore dest numkeys key1 [key2 ...]  [WEIGHTS weight [weight ...]]  [AGGREGATE SUM|MIN|MAX]
				求key1,key2的交集,key1,key2的权重分别是 weight1,weight2
				聚合方法用: sum |min|max， 聚合的结果,保存在dest集合内
				 Aggregate sum->score相加   , min 求最小score, max 最大score
				可以通过weigth设置不同key的权重, 交集时,socre * weights


map数据类型：
	hset key field value
	hmset key field1 value1 [field2 value2 field3 value3 ......fieldn valuen]
	hget key field
	hmget key field1 field2 fieldN
	hgetall key		拿到所有值
	hdel key field
	hlen key
	hexists key field
	hinrby key field value		是把key中的field域的值增长整型值value
	hinrby float  key field value
	hkeys key
	hvals key



事务(支持简单的事务)：
			Mysql					Redis
	开启	start transaction		muitl
	语句	普通sql					普通命令
	失败	rollback 回滚			discard 取消
	成功	commit					exec

	注: rollback与discard 的区别
	如果已经成功执行了2条语句, 第3条语句出错.
	Rollback后,前2条的语句影响消失.
	Discard只是结束本次事务,前2条语句造成的影响仍然还在

	注:
	在mutil后面的语句中, 语句出错可能有2种情况
	1: 语法就有问题, 
	这种,exec时,报错, 所有语句得不到执行

	2: 语法本身没错,但适用对象有问题. 比如 zadd 操作list对象
	Exec之后,会执行正确的语句,并跳过有不适当的语句.
锁：
	Redis的事务中,启用的是乐观锁,只负责监测key没有被改动.
	watch key1 key2  ... keyN		作用:监听key1 key2..keyN有没有变化,如果有变, 则事务取消
	unwatch 						作用: 取消所有watch监听
	开启事务之前要先监听key，如果exec之后返回nil,说明监视的key已经改变了,事务就取消了.


消息订阅：
	订阅端: Subscribe 频道名称
	发布端: publish 频道名称 发布内容


运维：
	time		 	当前服务器时间
	BGREWRITEAOF 	后台进程重写AOF
	BGSAVE       	后台保存rdb快照
	SAVE         	保存rdb快照
	LASTSAVE     	上次保存时间
	Slaveof master-Host port    把当前实例设为master的slave
	Showdown [save/nosave]
	info			查看redis服务器信息
	Config get 配置项  
	Config set 配置项 值 (特殊的选项,不允许用此命令设置,如slave-of, 需要用单独的slaveof命令来设置)

	
	
	注: 如果不小心运行了flushall, 立即 shutdown nosave ,关闭服务器
	然后 手工编辑aof文件, 去掉文件中的 “flushall ”相关行, 然后开启服务器,就可以导入回原来数据.如果,flushall之后,系统恰好bgrewriteaof了,那么aof就清空了,数据丢失.


=========================================================================================================================
其余数据类型：

geospatial
    Redis 在 3.2 推出 Geo 类型，该功能可以推算出地理位置信息，两地之间的距离
    底层通过zset实现，可以通过zset命令来操作geo


HyperLogLog算法使用：
	此算法使用来近似统计基数个数的，效果近似于count(distinct)，占用极小内存（十几k）
	PFADD hll ele：将ele添加进hll的基数计算中
			1. 先对ele求hash（使用的是一种叫做MurMurHash的算法）
			2. 将hash的低14位(因为总共有2的14次方个桶)作为桶的编号，选桶，记桶中当前的值为count
			3. 从的hash的第15位开始数0，假设从第15位开始有n个连续的0（即前导0）
			4. 如果n大于count，则把选中的桶的值置为n，否则不变
	PFCOUNT hll：计算hll的基数。
	PFMERGE hll3 hll1 hll2：将hll1和hll2合并成hll3
	参考： https://www.jianshu.com/p/55defda6dcd2

bitmap:
    setbit sign 0 1
    GETBIT sign 3
    BITCOUNT sign


============================================
redis
	noeviction:			默认策略，如果内存大小达到阈值，所有申请内存的指令都会报错
	allkeys-lru: 		所有的key都是使用 LRU算法淘汰
	volatile-lru		所有设置了过期时间的key使用LRU算法淘汰
	allkeys-random
	volatile-random
	volatile-ttl		所有设置了过期时间的key，根据过期时间进行淘汰，越早过期就越早被淘汰


	