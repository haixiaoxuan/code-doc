# 数值计算
echo "scale=3; 3/4" | bc

# 远程数据同步
rsync 高效的远程数据同步工具

# 模糊匹配  * 任意个任意字符 | ？一个任意字符

# find
find / -size +1000k		# 查找根目录下文件大于 1000k 的文件

# lsof
	查看文件被哪个进程占用
	
# 时间同步
	ntpdate pool.ntp.org

# cut
	-f 列号; -d 分隔符; -b 按照字节分割
	
# sort
	-n 按照数字大小排序; -r 反序; -t 指定排序时分隔符; -k 指定排序字段

====================================================================================================================
# 条件判断
	1、整数比较  -lt -le -eq -ge -gt -ne
	2、文件权限判断	-r -w -x
	3、文件类型判断 -f -d -e 

# if
	if [ 123 -eq 123 ] 
	then
		echo ''
	elif [ .. ]
	then
		echo '' 
	fi

# case
	case $变量名 in 
	"值1"） 
    如果变量的值等于值1，则执行程序1 
    ;; 
	"值2"） 
    如果变量的值等于值2，则执行程序2 
    ;; 
	…省略其他分支… 
	*） 
    如果变量的值都不是以上的值，则执行此程序 
    ;; 
	esac

# for
	for 变量 in 值1 值2 值3…   | 	for (( 初始值;循环控制条件;变量变化 )) 例：for((i=0;i<=100;i++))
	do 
		程序 
	done

# while
	while [ 条件判断式 ] 
	do 
		程序 
	done
====================================================================================================================
# 函数：
	basename /home/etluser/xiexiaoxuan
	dirname /home/etluser/xiexiaoxuan

====================================================================================================================
# 特殊变量
	$0 $1 	文件名，第一个参数值
	$# 		获取所有参数个数
	$*		把命令行中所有参数看成一个整体
	$@		把命令行中所有参数区分对待
	$?		最后一个命令的返回状态


====================================================================================================================
	
# awk 把文件逐行读入，以空格为默认分割符
	基本用法：
		awk [选项参数] 'pattern1{action1}...' filename
		pattern：表示AWK在数据中查找的内容，就是匹配模式
		action：在找到匹配内容时所执行的一系列命令
	选项参数：
		-F	指定输入文件折分隔符
		-v	赋值一个用户定义变量
	内置变量：
		FILENAME 文件名
		NR	记录行数
		NF	记录列数
	例：	
		awk -F ":" '/^root/{print $7}'			查看root开头的行的第七列
		awk -F ":" '/^root/{print $7 "," $1}'
		awk -F : 'BEGIN{print "user, shell"} {print $1","$7} END{print "dahaige,/bin/zuishuai"}'
		awk -F: -v i=1 '{print $3+i}' 			传入自定义变量
		awk -F':' '{print $1 " - " $2}' /etc/passwd 		普通用法
		awk -F":" '{if(NR>10 && NR<15) print $3}' /etc/passwd 		查看10-15行
		echo 'a,1,3 4 5' | awk -F"[, ]" '{print $1 $4}'				指定多个分隔符进行分割
		awk -F":" '{count++;print $1} END{print "the count is " count}' /etc/passwd		计数（变量若没有初始化，默认是0）
		awk '/^$/{print NR}'	查询空行
		awk -F " " '{sum+=$2} END{print sum}'	求sum
	
	
# sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，
  接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。
  文件内容并没有改变，除非你使用重定向存储输出。
  基本用法：sed [选项参数] 'command' filename
  选项参数：
		-e 直接在指定列模式上进行动作
		-i 直接修改文件内容，不从屏幕输出
  命令参数：
		a 新增
		d 删除
		i 插入
		s 查找并替换
  例：
		sed -i '1a xiaoxuan'	在第一行后新增 一行xiaoxuan
		sed '/wo/d' sed.txt		删除包含wo的行
		sed 's/wo/ni/g' sed.txt	替换wo为ni (g 表示 global)
		sed -e '2d' -e 's/wo/ni/g' sed.txt 	先删除再替换


# vim
	/	从头开始查找		n 查找下一个
	？	从末尾开始查找
	字符串替换
		:s/well/good/ 		替换当前行第一个well为good
		:s/well/good/g		替换当前行所有well为good
		:n,$s/well/good/	替换第n行到最后一行，每一行第一个
		:n,$s/well/good/g	...
			n 若为 . 则替换当前行到最后一行


# grep
	grep -A n	显示匹配到的后n行
	grep -B n	显示匹配到的前n行
	grep -C n	显示匹配到的前后n行
	grep -i str	忽略大小写


===================================================================================
# 查看物理CPU个数
	cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l

# 查看每个物理CPU中core的个数(即核数)
	cat /proc/cpuinfo| grep "cpu cores"| uniq

# 查看逻辑CPU的个数
	cat /proc/cpuinfo| grep "processor"| wc -l
	